import{_ as i,o as s,c as e,a4 as l}from"./chunks/framework.ntKRoeGr.js";const t="/web-vue3x/assets/1.utils1.n6UCA4wW.png",n="/web-vue3x/assets/1.utils3.Dxutz2p_.png",r="/web-vue3x/assets/1.utils1.1.d_4PugTz.png",o="/web-vue3x/assets/1.utils1.3.BgdEJxFr.png",p="/web-vue3x/assets/1.utils1.2.CfZR9Tya.png",v=JSON.parse('{"title":"一.开发工具","description":"","frontmatter":{"lang":"zh-CN","sidebarDepth":1,"meta":[{"name":"description","content":"个人总结的vuepress学习技术文档-语法"},{"name":"keywords","content":"vuepress,最新技术文档,vuepress语法,markdown语法"}]},"headers":[],"relativePath":"base/engine/1.utils.md","filePath":"base/engine/1.utils.md","lastUpdated":1718897544000}'),h={name:"base/engine/1.utils.md"};function d(c,a,u,k,m,b){return s(),e("div",null,a[0]||(a[0]=[l('<h1 id="一-开发工具" tabindex="-1">一.开发工具 <a class="header-anchor" href="#一-开发工具" aria-label="Permalink to &quot;一.开发工具&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">前言</p><p>了解前端项目开发中环境的相关配置，工具的相关使用技巧等，有助于快速解决开发时遇到的各种问题，提高开发效率</p></div><h2 id="_1-node-js" tabindex="-1">1.Node.js <a class="header-anchor" href="#_1-node-js" aria-label="Permalink to &quot;1.Node.js&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">注意</p><p>实际开发中团队中 node 版本最好保持一致，包括各种环境（dev、sit、uat、生产）中</p></div><ul><li><p>1.<a href="http://nodejs.cn" target="_blank" rel="noreferrer">官网下载 Node.js</a>（以 windows 系统 64 位为例）</p><p><img src="'+t+`" alt="" loading="lazy"></p></li><li><p>2.安装 Node.js（注意有时有问题需要注意环境变量的配置）</p></li><li><p>3.cmd 中查看 node 版本，校验安装成功后，升级 npm</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm@latest</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # npm i npm -g</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h2 id="_2-版本控制" tabindex="-1">2.版本控制 <a class="header-anchor" href="#_2-版本控制" aria-label="Permalink to &quot;2.版本控制&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">注意</p><p>目前推荐使用<code>Git</code>及相关插件，不推荐 <code>SVN</code> 管理代码，但是推荐管理相关技术文档资料</p></div><ul><li>版本规范 挑选稳定版本 记录版本号 如果版本升级，需要总结版本差异</li></ul><h3 id="_2-1-安装-git" tabindex="-1">2.1 安装 Git <a class="header-anchor" href="#_2-1-安装-git" aria-label="Permalink to &quot;2.1 安装 Git&quot;">​</a></h3><ul><li><a href="https://git-scm.com" target="_blank" rel="noreferrer">Git 官网</a>下载 git 进行安装</li><li>常用命令 <ul><li>代码合并提交</li><li>创建分支、切分支</li><li>临时存储</li></ul></li></ul><h3 id="_2-2-安装-tortoisegit-git-比较好用的一个图形化工具-新手推荐用这个替代命令行" tabindex="-1">2.2 安装 TortoiseGit（git 比较好用的一个图形化工具，新手推荐用这个替代命令行） <a class="header-anchor" href="#_2-2-安装-tortoisegit-git-比较好用的一个图形化工具-新手推荐用这个替代命令行" aria-label="Permalink to &quot;2.2 安装 TortoiseGit（git 比较好用的一个图形化工具，新手推荐用这个替代命令行）&quot;">​</a></h3><ul><li><a href="https://tortoisegit.org/download/" target="_blank" rel="noreferrer">TortoiseGit 官网</a>下载 TortoiseGit 进行安装</li><li>使用教程</li></ul><h3 id="_2-3-gitlab-代码仓库" tabindex="-1">2.3 gitlab（代码仓库） <a class="header-anchor" href="#_2-3-gitlab-代码仓库" aria-label="Permalink to &quot;2.3 gitlab（代码仓库）&quot;">​</a></h3><ul><li>配置 ssh</li><li>分支策略</li><li>权限</li></ul><h2 id="_3-编辑器" tabindex="-1">3.编辑器 <a class="header-anchor" href="#_3-编辑器" aria-label="Permalink to &quot;3.编辑器&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">注意</p><p>不推荐使用 hbuilder、sublime text、WebStorm、Atom，推荐使用<code>Visual Studio Code</code>，重点关注一些常见的功能（终端、代码对比、批量替换、代码调试）</p></div><h3 id="_3-1-安装-vscode" tabindex="-1">3.1 安装 vscode <a class="header-anchor" href="#_3-1-安装-vscode" aria-label="Permalink to &quot;3.1 安装 vscode&quot;">​</a></h3><p>官网下载：<a href="https://code.visualstudio.com" target="_blank" rel="noreferrer">https://code.visualstudio.com</a></p><p><img src="`+n+'" alt="" loading="lazy"></p><p>勾选上述选项后，不需要拖动<code>代码文件</code>、或<code>项目目录</code>到编辑器，就可以直接用鼠标右键打开目标</p><h3 id="_3-2-使用自带的终端-bash-运行命令" tabindex="-1">3.2 使用自带的终端 + bash 运行命令 <a class="header-anchor" href="#_3-2-使用自带的终端-bash-运行命令" aria-label="Permalink to &quot;3.2 使用自带的终端 + bash 运行命令&quot;">​</a></h3><p>建议使用 vscode 自带的终端，快捷键<code>ctl</code>+<code>～</code>,右边下角操作完成后可以直接运行命令（同 cmd 上操作）</p><p><img src="'+r+'" alt="" loading="lazy"> -- <img src="'+o+'" alt="" loading="lazy"></p><h3 id="_3-3-代码对比" tabindex="-1">3.3 代码对比 <a class="header-anchor" href="#_3-3-代码对比" aria-label="Permalink to &quot;3.3 代码对比&quot;">​</a></h3><ul><li>右键需要比较的文件弹框选择<code>选择以进行比较</code></li><li>右键目标文件弹框选择<code>与已选项目进行比较</code></li></ul><p><img src="'+p+`" alt="" loading="lazy"></p><h3 id="_3-4-其他实用功能" tabindex="-1">3.4 其他实用功能 <a class="header-anchor" href="#_3-4-其他实用功能" aria-label="Permalink to &quot;3.4 其他实用功能&quot;">​</a></h3><ul><li>批量替换（支持使用正则方式进行复杂场景的替换，对大型项目中批量修改非常高效）</li><li>调试代码（可以直接在 vscode 中 debugger，更加直观感受整个代码运行流程）</li></ul><h2 id="_4-谷歌浏览器" tabindex="-1">4.谷歌浏览器 <a class="header-anchor" href="#_4-谷歌浏览器" aria-label="Permalink to &quot;4.谷歌浏览器&quot;">​</a></h2><ul><li>跨域，方便本地开发解决跨域问题<a href="http://zhoubichuan.com/web-javascript/3.senior/7.cross/1.browser.html#_2-3-%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8" target="_blank" rel="noreferrer">参考资料</a></li><li>相关调试技巧：developer tool</li><li>查看页面性能：LightHouse</li><li>vue 代码调试插件：vue-devtools</li><li>vue 页面性能测试插件：Vue performance Devtool</li></ul><h2 id="_5-npm" tabindex="-1">5.npm <a class="header-anchor" href="#_5-npm" aria-label="Permalink to &quot;5.npm&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">注意</p><p>推荐在 vscode bash 中运行相关命令</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node_modules</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #一些常见的命令操作需不能在cmd中执行，如删除依赖这个命令需要在bash中使用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><h3 id="_5-1-npm" tabindex="-1">5.1 npm <a class="header-anchor" href="#_5-1-npm" aria-label="Permalink to &quot;5.1 npm&quot;">​</a></h3><ul><li>npm(node package manage)是 nodejs 自带的包管理工具。</li><li>package.json <ul><li>~会匹配最近的小版本依赖包，比如~1.2.3 会匹配所有 1.2.x 版本，但是不包括 1.3.0</li><li>^会匹配最新的大版本依赖包，比如^1.2.3 会匹配所有 1.x.x 的包，包括 1.3.0，但是不包括 2.0.0</li><li>*这意味着安装最新版本的依赖包</li></ul></li></ul><h3 id="_5-2-cnpm" tabindex="-1">5.2 cnpm <a class="header-anchor" href="#_5-2-cnpm" aria-label="Permalink to &quot;5.2 cnpm&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry=https://registry.npm.taobao.org</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #可以在安装包的时候指定下载源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npm.taobao.org</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #改变全局默认下载地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry=https://registry.npm.taobao.org</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>cnpm 不受 package-lock.json 影响，只会根据 package.json 进行下载</li></ul><h3 id="_5-3-yarn" tabindex="-1">5.3 yarn <a class="header-anchor" href="#_5-3-yarn" aria-label="Permalink to &quot;5.3 yarn&quot;">​</a></h3><ul><li>有时候通过 cnpm 下载的包莫名不能用， 可以换用 yarn 解决这个问题</li></ul><h3 id="_5-4-pnpm" tabindex="-1">5.4 pnpm <a class="header-anchor" href="#_5-4-pnpm" aria-label="Permalink to &quot;5.4 pnpm&quot;">​</a></h3><ul><li>pnpm 速度快</li></ul><div class="tip custom-block"><p class="custom-block-title">总结</p><p>熟悉常用的 vue 项目开发工具，以及常见的配置，保障项目的一致性</p></div>`,42)]))}const _=i(h,[["render",d]]);export{v as __pageData,_ as default};
