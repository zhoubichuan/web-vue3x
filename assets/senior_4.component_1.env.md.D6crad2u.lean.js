import{_ as a,c as i,a3 as n,o as e}from"./chunks/framework.Mbco7TV_.js";const c=JSON.parse('{"title":"二.数据输入（富文本）","description":"","frontmatter":{"lang":"zh-CN","sidebarDepth":2,"meta":[{"name":"description","content":"个人总结的vuepress学习技术文档-语法"},{"name":"keywords","content":"vuepress,最新技术文档,vuepress语法,markdown语法"}]},"headers":[],"relativePath":"senior/4.component/1.env.md","filePath":"senior/4.component/1.env.md","lastUpdated":1718897544000}'),t={name:"senior/4.component/1.env.md"};function l(p,s,h,r,k,o){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="二-数据输入-富文本" tabindex="-1">二.数据输入（富文本） <a class="header-anchor" href="#二-数据输入-富文本" aria-label="Permalink to &quot;二.数据输入（富文本）&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">前言 --&gt; 富文本组件特点</p><p>了解常见组件的开发思路，项目中有很多二次封装的组件，大体设计思路上都是想通的，当遇到组件相关的问题时，可以直接查看相关组件的源码，从而快速定位问题。</p></div><h2 id="_1-目录结构" tabindex="-1">1.目录结构 <a class="header-anchor" href="#_1-目录结构" aria-label="Permalink to &quot;1.目录结构&quot;">​</a></h2><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        # 前端资源目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 图片目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> components</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 公共组件目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pages</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # 页面目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # 状态管理 store 目录</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_2-组件封装" tabindex="-1">2.组件封装 <a class="header-anchor" href="#_2-组件封装" aria-label="Permalink to &quot;2.组件封装&quot;">​</a></h2><h2 id="_3-使用案例" tabindex="-1">3.使用案例 <a class="header-anchor" href="#_3-使用案例" aria-label="Permalink to &quot;3.使用案例&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">总结</p><p>通过对前端组件的分析，需要重点关注组件中易变性对组件封装的影响，它会对组件的可复用性、可扩展性产生很大影响</p></div>`,7)]))}const F=a(t,[["render",l]]);export{c as __pageData,F as default};
