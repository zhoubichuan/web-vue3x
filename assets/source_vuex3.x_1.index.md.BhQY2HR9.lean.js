import{_ as t,o as a,c as s,a4 as r}from"./chunks/framework.BQSspPyc.js";const o="/web-vue3x/assets/Vuex.BnFiq1uJ.png",c=JSON.parse('{"title":"源码概览(Vuex3.x)","description":"","frontmatter":{"lang":"zh-CN","sidebarDepth":1,"meta":[{"name":"description","content":"个人总结的vuepress学习技术文档-语法"},{"name":"keywords","content":"vuepress,最新技术文档,vuepress语法,markdown语法"}]},"headers":[],"relativePath":"source/vuex3.x/1.index.md","filePath":"source/vuex3.x/1.index.md","lastUpdated":1718897544000}'),n={name:"source/vuex3.x/1.index.md"};function u(i,e,x,d,p,l){return a(),s("div",null,e[0]||(e[0]=[r('<h1 id="源码概览-vuex3-x" tabindex="-1">源码概览(Vuex3.x) <a class="header-anchor" href="#源码概览-vuex3-x" aria-label="Permalink to &quot;源码概览(Vuex3.x)&quot;">​</a></h1><p><img src="'+o+'" alt="" loading="lazy"></p><h2 id="_1-实例化-vuex-store" tabindex="-1">1.实例化 Vuex.store <a class="header-anchor" href="#_1-实例化-vuex-store" aria-label="Permalink to &quot;1.实例化 Vuex.store&quot;">​</a></h2><p>将用户的配置文件通过 new Vuex.store(options) 得到一个对象，以 store 值作为 vue 初始化实例的对象的一个值传入</p><h2 id="_2-加载-vuex-插件" tabindex="-1">2.加载 Vuex 插件 <a class="header-anchor" href="#_2-加载-vuex-插件" aria-label="Permalink to &quot;2.加载 Vuex 插件&quot;">​</a></h2><p>Vuex 是以插件的方式通过 Vue.use 加载的，当 Vue.use(Vuex)时,内部会调用 Vuex 这个类上面的 install 方法，通过 Vue.mixin 方法混入到 beforeCreate 这个生命周期中 this.store=this.$option.store</p><h2 id="_3-当加载组件的时候" tabindex="-1">3.当加载组件的时候 <a class="header-anchor" href="#_3-当加载组件的时候" aria-label="Permalink to &quot;3.当加载组件的时候&quot;">​</a></h2><p>执行生命周期函数会将之前实例化 Vuex.store 挂载到 this.store 上，用户可以使用 this.store.state、this.store.mutation</p><h3 id="_3-1-mapstate" tabindex="-1">3.1 mapState <a class="header-anchor" href="#_3-1-mapstate" aria-label="Permalink to &quot;3.1 mapState&quot;">​</a></h3><p>用户将 mapState 在 computed 中使用会返回一个对象，这个对象就是之前在 store 中写的配置，里面有各种 state，在 compute 中会转换成一个函数，返回值的 state 指向 store 中的 state，key 就是自己想要拿到的 key</p>',10)]))}const m=t(n,[["render",u]]);export{c as __pageData,m as default};
